<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAQEAAAAEACAAoFgAAFgAAACgAAABAAAAAgAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAuYTQAL2I1AC9hOwAwYzYAMWQ3ADFlOAAyZD4AMmY5ADhlPgAzZzoANGg7ADpnPwAvaT0ANms1ADVp
        PAA7aEAAKVWDADZqPAA3bDYAMWw4ADxpQQAqVoQAMm05AEJoRwAzbjoAM2xBAENpSAA5bT8AOm1AADps
        RwA6bkEARWtKAEZsSwA8cEMAR21LAEhuTABJb00ARHFKAEpwTgBFcksAUHFNAFFxVABSclUASXZPAFNz
        VgBUdFcAVXVYAFJ6UQBXd1oAWHhbAFl5XABfelsAYHpiAFd+XABhe2MAYnxkAF1+YQBZgF4AY31lAGR+
        ZgBfgGMAZX9nAGCBZABmgGgAZ4FpAGOEZwBpg2sAZIVoAGqEbABrhW0AZodqAGyGbgBth28AbohwAGmK
        bQBvh3YAaYlyAG+JcQBwiHcAaopzAHCKcgB2iXYAcYl4AHeKdwByjHMAeIt4AHONdAB5jHkAeo16AHWP
        dgB7j3sAfJB8AH2RfQB+kn4AepR7AH+TfwB8ln0AgZWBAHyVgwCCloIAg5eDAH6XhQCFlooAhJiEAIWZ
        hQCAmYcAh5iMAIiZjQCHm4cAiZqOAImciACKm48Aip2JAIuckACLnooAjJ2RAI2fkgCOoY0AjqCTAI+i
        jgCUoZIAj6GUAJCjjwCWopMAkKKVAJejlACRo5YAkqWSAJiklQCSpJcAk6aTAJmllgCTpZgAlKeUAJqm
        lwCUppkAm6eYAJWnmgCcqJkAlqibAJ2pmgCXqZwAnqqbAJ+rnQCZq58AoKyeAKGtnwCbraEAoq6gAKKt
        pQCjr6EAo66mAJ6wpAClsKgApbKjAKaxqgCms6QAp7KrAKe0pQCotaYAqbStAKm2pwCqta4AqreoAKy2
        rwCruKkArbewAKy5qgCuuLEArrqrAK+6sgCwu7MAsb2uALG8tACyvbUAs762ALS/twC1wLgAtsG5ALfC
        uwC+w7oAuMO8AL/EuwC5xL0AusW+AMDGvAC8xr8Awce9AMPIvgC9yMAAxMm/AL7JwQDFysAAv8rCAMbL
        wQDAy8MAx8zCAMHMxADIy8kAyM3DAMLNxQDJzMoAyc7EAMPOxgDKz8UAxM/IAMvPzADG0coAzNDNAMzS
        yADO0c4AzdPJAM/S0ADP1MoA0NPRANDVywDR1NIA0tXTANLXzQDT1tQA09jOANTX1QDU2c8A1drQANXZ
        1gDW2tcA19vYANnc2QDa3dsA297cANzf3QDd4N4A3uHfAN/j4ADg5OEA4eXiAOLm4wDk5+UA5ejmAObp
        5wDn6ugA6OvpAOnt6gDq7usA6+/sAO/y8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAEBBmFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRAQEBAQEBAQURAQ
        EBBREBUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRAQEBAQEBAQ
        EBAQEBAQEBAQFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVEBAQ
        EBAQEBAQEBAQEBAQEBAVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUV
        EBAQEBAQEBAQEBAQEBAQEBAQFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUV
        FRUVFRUQEBAQEBAQEBAQEBAQURAVFRUVFRUVFRUVFRUVEBUVFRAQEBAQFRUVFRUVFRUVEBUVFRUQFRAV
        FRUVEBAVFRUQEBAQEBAQEBAQEBAQEBAQFRUVFRUVFRUVFRUVFRAQFRUVEBAQEBAVFRUVFRUVFRAQEBUQ
        EBAQEBUVEBUQEBUQFRAQEBAQEBAQEBAQEBAQEBAVFRUVFRUVFRUVFRAQEBUVFRAQEBAQEBAQFRUVFRAQ
        EBAVEBAQEBAVEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQFRUVFRUVFRUVFRUQEAAAEwEBCAAACAABUV5Y
        FBIbAAAAAgUACAACAAEAAAgAAAACAAAAAAAAAAAACAAIKBAQEBUVFRUVFRUVFRUVFRUIAAgRAAAIAgIX
        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
        CECUlgAAWCJRe1ooACgQEBAVFRUVFRAQEBAQEBAQCAAAKBdue1cADQAIAAEACAAIAAAAAAgACAAADQhR
        XV4AAACplAAAURp7e3tuKAAIEBAQFRUVFRUQEGYQEBAQEAAAAAAADyh7CAAAAAgNAAgAAAAACAAIAAAA
        DQhEhlxRAAALACgACEJ7bnszCDMIKBAQEBUVFRUVFRUVEBAQEBAICAAIABcIQF9uAAAIAAAAAAAIAAAA
        CAAACAAAM1wzAAgAABcAFwA0e4MIAAgACAAQEBAVFRUVFRUVFRUQEBAQAAAAAAAAQHt7bhwACAgIAAgA
        AAAACAAAAAAADQAzKAgAAAAIAAgNMzNfUQAAAAAoEBAQFRUVFRUVFRUVEBAQEBcACAgAAAAoe3tTeygA
        AA0IAAAIAAAACAAIAAgACAAIAAAIAAAACABTXXsACAAACBAQEBUVFRUVFRUVFRUQEBAAAAAAAAAAKDNY
        AFEACA0AAAAAAA0AAAAAAAAAAAAAAAAAAAAACAAAMwAAAAANCCgQEBUVFRUVFRUVFRUVFRUVKCgXFygX
        FygXCCgXFygXFwgoFygXFygoFxcoCCgXFygXFygXFygIKBcXKBcXKBcXEBAVFRUVFRUVFRUVFRUVFRUV
        FRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUV
        FRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUV
        FRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUV
        FRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUV
        FRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUV
        FRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUV
        FRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUV
        FRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUV
        FRUVFRUVFRUVFRUVFRUVFRUVFRUVFQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</value>
  </data>
</root>